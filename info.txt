Controller Folder:
Writing all functions and logics
Routes Folder:
Writing all routes and combine appropriate functions from Controller folder
-----------------------------
Google OAuth Process:
    1)Go to 'https://console.developers.google.com/apis/credentials'
    2)Before that you want to login with your gmail 
    3)Go to OAuth consent screen and create new project
    4)After that,click external 
    5)Give your application name and email id
    6)Skip next three and continue
    6)After creating OAuth consent screen,go to 'credentials'
    7)In application type,click Web application
    8)Create it and download json file(It has client id and client session)
https://console.cloud.google.com/apis/credentials?project=ace-memento-333610&supportedpurview=project
Go to this link with email id(mohamedzuhairka@gmail.com) and check how it created.
    If some error happens, go to "https://youtu.be/LKlO8vLvUao" time:'50:00' to '1:00:00'

Syntax:

   <GoogleLogin
            clientId="0.apps.googleusercontent.com"
            render={(renderProps) => (
              <Button className={classes.googleButton} color="primary" fullWidth onClick={renderProps.onClick} disabled={renderProps.disabled} startIcon={<Icon />} variant="contained">
                Google Sign In
              </Button>
            )}
            onSuccess={googleSuccess}
            onFailure={googleError}
            cookiePolicy="single_host_origin"
          />
 const googleSuccess = async (res) => {
    console.log(res);
    const result = res?.profileObj; //If res object is not present,this will not throw error because we use ?
    const token = res?.tokenId; //If res object is not present,this will not throw error because we use ?

    try { //Since we working with async,we use try/catch
      dispatch({ type: AUTH, data: { result, token } });

      history('/');
    } catch (error) {
      console.log(error);
    }
  };

  const googleError = (error) => alert('Google Sign In was unsuccessful. Try again later');
-----------------------------
 req.headers.authorization=`Bearer ${JSON.parse(localStorage.getItem('profile')).token}`;
 Don't put 'A' use 'a' in authorization.
-----------------------------
 import {Pagination,PaginationItem} from '@material-ui/lab';
 This components are still in experimental features so import from lab.
-----------------------------
<TextField name="search" variant="outlined" fullWidth label="Search Memories" value={search} onChange={(e)=>{setSearch(e.target.value)}} onKeyPress={handleKeyPress}/>
const handleKeyPress=(e)=>{
      if(e.keyCode===13){//Pressed Enter Key

      }
    }
-----------------------------
In Home.js,
     dispatch(getPostBySearch({search,tags:tags.join(',')}))
     Here,tags is array.In url,we cannot able to pass array.So,we join array using delimeter ','.
-----------------------------
QUERY=> '/posts?page=1'
PARAMS=> '/posts/:id'
-----------------------------
Syntax:
    const title=new RegExp(searchQuery,'i');
Here first is data,second is flag
i stands for ignorecase
-----------------------------
The $or operator will match either of the condition with the documents. It does not matter if all the conditions match or not. The only condition matching the document is enough with the $or operator. 
The value of the $in operator is an array that contains few values. The document will be matched where the value of the breed field matches any one of the values inside the array.
Syntax:
    const posts=await postMessage.find({$or:[{title},{tags:{$in:tags.split(',')}}]})
-----------------------------
In server/controller/posts.js/getPosts():
Syntax:
        const LIMIT=8;
        const startIndex=LIMIT*(Number(page)-1); //Start Index of every page example:if page is 3,the startindex is (8*(3-1))=16.Subtracting 1 because index starts from 0.
        const total=await PostMessage.countDocuments({}); //Total documents in a collection.We pass {} because we did not want to filter based on any property.
        
        const posts = await PostMessage.find().sort({_id:-1}).limit(LIMIT).skip(startIndex);

        Here sort({_id:-1}):New documents will show first.
             limit(LIMIT):selete first 8 documents only.
             skip(startIndex):skip first LIMIT*(Number(page)-1) documents.
-----------------------------
